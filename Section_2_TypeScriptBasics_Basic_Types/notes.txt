-> One key difference between javascript and typescript is that javascript uses dynamic types, which are resolved at runtime, and typescript uses static types, which are set during the development time and should remain the same throughout the time.

-> Also, we must have in consideration the casing when assigning types. Core types in Typescript are all lowercase.

-> Beside the 'number' type, which we have seen on the previous chapter, there are two other core types in typescript: 'string' and 'boolean'
    - Regarding the 'boolean' type, you can only accept true or false, and not truthy or falsy values

-> You could explicitly declare the variable type when you declare it (ex. let age : number = 49)
    - Although this is possible, it's not a best practise as Typescript has a type inference mechanism that can infere the type
    - The only way this explict type declaration would make sense is if you don't give a value to the declared attribute.

-> Also one thing to have in mind is that whenever you first make the variable declaration and initialization, you must respect the type infered.
    - For instance, if I create a variable that has a string value, I can't change this variable's value to a number.

-> If you try to access an object's property that doesn't exist, you will be given an error at compile time.

-> Adding upon the object types mentioned above, we have the object type.
    - If we specify something being of type object (native javascript), we will be given error accessing object properties that do exist
    - To avoid such errors, we should either let Typescript infer the type or explicitly provide the object type

-> You can also define arrays as your type.
    - The syntax for it is <array_type>[] (ex. string[])

-> The other type defined is a 'tuple'.
    - Tuples are useful whenever you want to have an array of exactly x elements.
    - An example of tuple definition is role:[number, string]. This defined a tuple with exactly 2 elements, being the first element a number and the second element a string.

-> Another type that we have here is 'union' type.
    - This type allows us to have more flexibility regarding the value accepted for a type.
    - For example, when declaring a function we might want the type of the parameters to either be strings or number.
    - In order to do that, what we can do is: "functionInputParameter: string | number" .

-> One aspect to have in consideration is 'literal types'.
    - Literal types are the basic types that compose typescript/javascript, but that have a specific value attached to them.
    - For example in an union type, I want to have the string 'admin' as a part of the union.

-> Sometimes we can abbreviate our type definition (ex. when defining the same union type over and over again)
    - To abbreviate it, we can use what is called type aliases.
    - To define one we must do the following, for example when defining an union type: type TypeName = string | number.


